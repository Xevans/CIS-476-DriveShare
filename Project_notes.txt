3/18
set up user account model and profile models.

Register page: host/accounts/register

3/25
set up user profiles.
    - Wallet
    - Cars Listed
    - Reviews given
    - Reviews recieved


han;testploy01

3/26
Testing pathing to other apps in the project
EX: logout from landing, clicking profile from landing (done)

Test user media resizing.

Create form to add credits to the user's wallet.


3/28
han2;testploy02 - current test account

Adding to user balance is functional.

Create a car listing system.
Create model >> create form to upload >> create page to display in grid view (loop)

Testing listing creation (done)

4/1
Testing Displaying of uploaded listings for personal listing view. (Done)

Testing Displaying of all uploaded listings for public listing view.(Done)

Remaining product work items:
Give Cards to listings
Add modals to the listings for button interactions
Add and test Application system
Add and test a Review system (show reviews on user dashboard page (welcome authenticated))
Add a rental history tracker (user dashboard page (welcome authenticated))
Show balance on user dashboard page
Show incoming Requests on user dashboard page


Testing Review System

4/2
Update listing upload process (is_available does not need to be initialized. Already default to true)
    - Once listing is created retrieve the table id and set the vehicle id field to it (done)


Update public listings to show apply button (done)
    - open modal to prompt ("how many days?") and below "send", "cancel"
    - show apply button only for listings NOT made the current user. (done)
I have set most of the fields to be filled out by the system.
User only needs to set days to calculate est. price.
- edge case (user submits negative integer for the lease length).

4/4

Update the welcome page
    - create a home link in the nav. (done)
    - create dashboard layout (just a bunch of retrieved information for the user to view and respond to).
        - display listings (done)
        - display application Requests (outgoing) (done)
        - display application Requests (incoming) (done)
        - display reviews (do later)
        - display DMs (do later)

    - check is application is_denied and is_approved. (done)
        - if is_denied is True, show that application is rejected (not required in scope but user would be able to delete the app delete)
        - if is_approved is True, show that the application is approved and give user option to accept the driveshare
            - calculated total will show, and payment form [<- create this] will need to be submitted to finalize the application process.
                - validate user has funds, if not, let them know 'insufficient funds', if valid, deduct from borrower, pay the owner.

1. add a button the name accept
2. send a post with the vaule being the current record's application id
3. retrieve id on backend
4. manipulate its attributes based on the 

(!) Do not worry about reject functionality in the scope of the coursework submition

create transaction history page
    - show past and current rentals.

make it so that only one persone can apply at a time.
(add an is applied for boolean field.)


(1) Work on accept and reject process of applications.
(2) Work on review system. (if user has transacted with another user, the reviews page shows the user's name and a textbox.)
(3) messaging system

4/5 - 4/6
fix payment process (done)
rebuild db try to apply and approve and see if balance is negated. (done)

flip is_available boolean in respective listing when application gets approved. (done)

if record is_available parameter is false, show disabled button that says unavailable. (done)

Allow a message field in the application form and model. Display the message in the card on the dashboard. (done)

Add a past transactions page (done)

Add a review page where the view checks to see if the user has any past transactions
if so, it allows the user to write a review for each unique username found.



4/7
Review System:
In dashboard view
when an application is approved -> create two review objects.
    - one for the owner and one for the borrower.
    - set both their application ID fields to the current application being approved
    - set the unset members of the review object ex: make, model, year, days leased.

In Review view
check to see if the logged in user has any reviews linked to their username where is_published is false
if so
    - for each object found, search for the related application using the application id field
        - display the object information on screen per review unpublished
        - have a modal form for each, so the user can fill out the review text.

if is_published is true
    - for each published review
        - display the rental information, followed by the published review


Check to see if the logged in user has any reviews about themself
    - for each review in the table where the logged in user is a recipient
        - display the publisher, make, model, year, and review.





show sucess messages on all pages. (optional)


Additional work tasks:
utilize the update listing form to update the listing model.
security questions for account recovery.


(skip dms. Potentially add messaging to application as a substitue.)
Spend the weekend ironing out kinks and making the pages look nice.




